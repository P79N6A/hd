<?php


class UserCommentController extends InteractionBaseController
{



    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->crossDomain();
    }

    /**
     * 允许跨域请求
     */
    private function crossDomain()
    {
        $host = isset($_SERVER['HTTP_ORIGIN']) ? $_SERVER['HTTP_ORIGIN'] : '';

        if (false !== strpos($host, '.cztv.com')) {
            header('content-type:application:json;charset=utf8');
            header('Access-Control-Allow-Origin:' . $host);
            header('Access-Control-Allow-Methods:POST,GET,PUT');
            header('Access-Control-Allow-Headers:x-requested-with,content-type');
        }

    }

    /**
     * 添加评论接口
     *
     */
    public function addAction()
    {

        if("nhudong_product"!=app_site()->memprefix) {
            $queueName = app_site()->memprefix . UserComments::QUEUENAME;
        }
        else {
            $queueName = UserComments::QUEUENAME;
        }

        if (Request::isPost()) {
            $data = Request::getPost();
            if (!isset($data['data_id']) || !isset($data['username'])) {
                $this->_json([], 4009, "params error");
            }

            //校验data_id是否存在
            $res = Data::findFirst("id=" . $data['data_id']);
            if (!res) {
                $this->_json([], 4002, 'data_id Not found');

            }

            //判断父节点是否和data_id匹配
            if($data['father_id']){
                $userComments = UserComments::findFirst("id=" . $data['father_id']);
                if($userComments->data_id != $data['data_id']){
                        $this->_json([], 403, 'father_id Not match data_id');
                }
            }

            //评论开关
            $is_accept = RedisIO::get(UserComments::REVIEW . $data['data_id']);  //先审后发开关
            if($is_accept == 1){
                $this->_json([],5001,"Can not comment");
            }

            //敏感词过滤
            $commentModel = new Comment();
            $isFilter = $commentModel->commentFilter($data['content']);  //过虑评论
            if($isFilter){
                $this->_json([], 4005, '非法评论!');
                exit;
            }

            $user_id = Request::getPost('user_id','int');
            $data_id = Request::getPost('data_id','int');
            //redis_id
            $data['comment_id'] = UserComments::createCommentId($user_id,$data_id);
            $data['create_at'] = time();
            $data['partition_by'] = date("Y");
            $data['status'] = UserComments::UNCHACKED;
            $data['client'] = Request::getPost('client','string')?:"wap";
            $data['channel_id'] = $res->channel_id;

            //插入到Redis
            UserComments::RSave($data);

            //加入队列
            $res = $this->queue->sendMessage(json_encode($data), $queueName);
            //开发模式打开
            //$comment = new UserComments();
            //$res = $comment->createComment($data,true);

            if ($res) {
                //插入到Redis方便更新到数据库
                RedisIO::zAdd(DataStatistics::QUEUEDATAID, 0, $data['data_id']);
                $this->_json([]);
            } else {
                $this->_json([], 4004, 'error！');
            }
        } else {
            $this->_json([], 4002, 'Not Post');
        }
    }



    /**
     * 获取评论接口并建树
     *
     */
    public function getCommentTreeBakAction()
    {
        $data_id = intval(Request::getQuery('data_id','int',0));
        //判断媒资库和Redis是否存在
        if (!Data::findFirst($data_id) || !RedisIO::exists(UserComments::IS_ACCEPT . $data_id)) {
            $this->_json([], 404, "data_id not found");
        }
        $page = intval(Request::getQuery('page','int',1));
        $limit = intval(Request::getQuery('limit','int',30));

        $is_accept = RedisIO::get(UserComments::REVIEW . $data_id);  //先审后发开关

        if($is_accept){
            $res = UserComments::Rfind($data_id,$limit,$page);
        } else {
            $res = UserComments::getAccept($data_id,$limit,$page);
        }


        //排序键值对
        $items = array();
        foreach ($res as $val) {
            if(isset($val['id'])){
                $items[$val['id']] = $val;
            }
        }

        //构建盖楼树
        $tree = array();
        foreach ($items as $key => $item) {
            if (isset($items[$item['father_id']])) {
                $items[$item['father_id']]['son'][] = &$items[$item['id']];
            } else {
                $tree[] = &$items[$item['id']];
            }
        }

        $this->_json($tree);

    }

    /**
     * 获取评论接口并建树
     * 带是否审核开关
     *
     */
    public function getCommentTreeAction()
    {
        $data_id = intval(Request::getQuery('data_id','int'))?:0;
        $page = intval(Request::getQuery('page','int'))?:1;
        $limit = intval(Request::getQuery('limit','int'))?:30;
        //判断媒资库和Redis是否存在
        if (!Data::findFirst($data_id)) {
            $this->_json([], 404, "data_id not found");
        }

        $is_accept = RedisIO::get(UserComments::REVIEW . $data_id);  //先审后发开关

        if($is_accept == 1 ){
            $this->_json([], 5001, "can not comment");

        } else {
            $res = UserComments::getCommentAll($data_id, $limit, $page);

        }

        //排序键值对
        $items = array();
        foreach ($res as $val) {
            if(isset($val['id'])){
                $items[$val['id']] = $val;
            }
        }

        //构建盖楼树
        $tree = array();
        foreach ($items as $key => $item) {
            if (isset($items[$item['father_id']])) {
                $items[$item['father_id']]['son'][] = &$items[$item['id']];
            } else {
                $tree[] = &$items[$item['id']];
            }
        }
        rsort($tree);
        $this->_json($tree);

    }



    /**
     * 获取评论接口无延迟但无树
     *
     */
    public function getCommentAction()
    {
        $data_id = intval(Request::getQuery('data_id','int'))?:0;

        //判断媒资库和Redis是否存在
        if (!Data::findFirst($data_id)) {
            $this->_json([], 404, "data_id not found");
        }

        $page = intval(Request::getQuery('page','int'))?:1;
        $limit = intval(Request::getQuery('limit','int'))?:30;

        $is_accept = RedisIO::get(UserComments::REVIEW . $data_id);  //先审后发开关
        if($is_accept == 2){
            $res = UserComments::getCommentAll($data_id,$limit,$page,false);
        } elseif($is_accept == 3) {
            $res = UserComments::getAccept($data_id,$limit,$page,false);
        } else {
            $this->_json([], 5001, "can not comment");
        }

        $this->_json($res);

    }


    /**
     * 评论点赞接口
     *
     */
    public function likesAction()
    {
        $id = intval(Request::getQuery('id', 'int'));
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $ip = $this->getClientIp();
        $users = md5($ip . $id);
        $hudongKey = "hudongCommentLikes:" . $id;
        $userCount = RedisIO::get($users);
        //最多点赞数
        $setCount = RedisIO::get("hudongLikesCounts");

        if (RedisIO::exists($users) && $userCount >= $setCount) {
            $this->_json([], 4007, 'Max Likes');
        } else {
            $comment = UserComments::findFirst("id = {$id} and data_id = {$data_id}");
            if ($comment) {
                $comment->likes++;
                if ($comment->save()) {
                    RedisIO::incr($hudongKey);
                    RedisIO::incr($users);

                    //状态不是禁用的放入点赞有序集合
                    if($comment->status != UserComments::REJECT) {
                        RedisIO::zAdd(UserComments::COMMENT_LIKES . $comment->data_id, $comment->likes, $comment->comment_id);
                    }
                    //放入审核通过点赞列表
                    if($comment->status == UserComments::ACCEPT){
                        RedisIO::zAdd(UserComments::COMMENT_LIKES_ACCEPT . "data_id:" . $comment->data_id, $comment->likes, $comment->comment_id); //已审核列表
                    }
                    //更新评论数据
                    RedisIO::set(UserComments::USER_COMMENT_ID . $comment->comment_id,json_encode($comment));

                    $this->_json($comment->likes);
                } else {
                    $this->_json([], 4005, 'likes error');
                }
            } else {
                $this->_json([], 4006, 'data_id Not Found or Not id match data_id');
            }
        }

    }

    /**
     * 获取评论点赞接口
     *
     */
    public function getLikesAction()
    {
        $id = intval(Request::getQuery('id', 'int'));
        if ($id == 0 || $id == null) {
            $this->_json([], 4009, "params error");
        }
        $comment = UserComments::findFirst($id);
        if ($comment) {
            $this->_json($comment->likes);
        } else {
            $this->_json([], 4006, 'comment_id Not Found');
        }
    }

    /**
     * 评论盖楼
     * @param $items
     * @return array
     */
    protected function _tree($items)
    {

        $tree = array();
        foreach ($items as $key => $item) {
            if (isset($items[$item['pid']])) {
                $items[$item['pid']]['son'][] = &$items[$item[$key]];
            } else {
                $tree[] = &$items[$item[$key]];
            }
        }
        return $tree;

    }

    /**
     * @param $data
     * @param int $code
     * @param string $msg
     */
    protected function _json($data, $code = 200, $msg = "success")
    {

        $resp =  json_encode([
            'code' => $code,
            'msg' => $msg,
            'data' => $data,
        ]);
        if (isset($_GET['callback'])) {
            echo htmlspecialchars($_GET['callback']) . "({$resp});";  //jsonp
        } else {
            header('Content-type: application/json');
            echo $resp;
        }
        exit;
    }


    /**
     * 获取客户端IP地址
     * @param integer $type 返回类型 0 返回IP地址 1 返回IPV4地址数字
     * @param boolean $adv 是否进行高级模式获取（有可能被伪装）
     * @return mixed
     */
    protected function getClientIp($type = 0, $adv = false)
    {
        $type = $type ? 1 : 0;
        static $ip = null;
        if (null !== $ip) {
            return $ip[$type];
        }

        if ($adv) {
            if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {
                $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);
                $pos = array_search('unknown', $arr);
                if (false !== $pos) {
                    unset($arr[$pos]);
                }

                $ip = trim($arr[0]);
            } elseif (isset($_SERVER['HTTP_CLIENT_IP'])) {
                $ip = $_SERVER['HTTP_CLIENT_IP'];
            } elseif (isset($_SERVER['REMOTE_ADDR'])) {
                $ip = $_SERVER['REMOTE_ADDR'];
            }
        } elseif (isset($_SERVER['REMOTE_ADDR'])) {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        // IP地址合法验证
        $long = sprintf("%u", ip2long($ip));
        $ip = $long ? array($ip, $long) : array('0.0.0.0', 0);
        return $ip[$type];
    }

    /**
     * 媒资点赞接口
     */
    public function meiZiLikesAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $ip = $this->getClientIp();
        $user = md5($ip . $data_id);
        $userLikes = RedisIO::get($user);

        //最多点赞数
        $setMeiZiCount = intval(RedisIO::get("setMeiZiCounts:" . $data_id));
        if (Data::findFirst($data_id)) {
            if (RedisIO::exists($user) && $userLikes >= $setMeiZiCount) {
                $this->_json([], 4007, 'Max meiZiLikes');
            } else {
                $likes = RedisIO::incr('meiZiLikes:' . $data_id);
                RedisIO::incr($user); //设置用户点赞次数
                if ($likes) {
                    //插入到Redis方便更新到数据库
                    RedisIO::zAdd(DataStatistics::QUEUEDATAID, 0, $data_id);
                    $data['counts'] = $likes;
                    $data['counts_base'] = $likes + RedisIO::get("baseLikesCounts:" . $data_id);
                    $this->_json($data);
                } else {
                    $this->_json([], 4004, 'likes error');
                }
            }
        } else {
            $this->_json([], 4006, "data_id Not Found");
        }


    }

    /**
     * 获取媒资点赞数
     */
    public function getMeiziLikesAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        if (Data::findFirst($data_id)) {
            $likes = intval(RedisIO::get("meiZiLikes:" . $data_id));
            $data['counts'] = $likes;
            $data['counts_base'] = $likes + RedisIO::get("baseLikesCounts:" . $data_id);
            $this->_json($data);
        } else {
            $this->_json([], 4006, 'data_id Not Found');
        }
    }


    /**
     * 分享回调接口
     *
     */
    public function shareCallBackAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        if (Data::findFirst($data_id)) {
            $share = RedisIO::incr('share:' . $data_id);
            $data['counts'] = $share;
            $data['counts_base'] = $share + RedisIO::get("baseShareCounts:" . $data_id);
            //插入到Redis方便更新到数据库
            RedisIO::zAdd(DataStatistics::QUEUEDATAID, 0, $data_id);
            $this->_json($data);
        } else {
            $this->_json([],4006,"data_id Not Found");
        }
    }

    /**
     * 获取分享回调数据
     */
    public function getShareAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $res = Data::findFirst($data_id);
        if ($res) {
            $counts = intval(RedisIO::get('share:' . $data_id));
            $data['counts'] = $counts ?: 0;
            $data['counts_base'] = $counts + RedisIO::get("baseShareCounts:" . $data_id);
            $this->_json($data);
        } else {
            $this->_json([],4006,"data_id Not Found");
        }
    }

    /**
     * 获取评论总数
     */
    public function getAllCommentAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $key = "allCommentCounts:" . $data_id;
        $res = Data::findFirst($data_id);
        if ($res) {
            $counts = intval(RedisIO::get($key));
            $data['counts'] = $counts ?: 0;
            $data['counts_base'] = $counts + RedisIO::get("baseCommentCounts:" . $data_id);
            $this->_json($data);
        } else {
            $this->_json([], 4006, "data_id Not Found");
        }

    }

    /**
     * 获取访问量
     */
    public function hitsAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $res = Data::findFirst($data_id);
        if ($res) {
            $data['counts'] = intval(RedisIO::incr("hits:" . $data_id));
            RedisIO::zAdd(DataStatistics::QUEUEDATAID, 0, $data_id);
            $data['counts_base'] = intval(RedisIO::get("hits:" . $data_id) + RedisIO::get("baseHitsCounts:" . $data_id));
            $this->_json($data);
        } else {
            $this->_json([], 4006, 'data_id Not found');
        }
    }

    /**
     * 获取访问量
     */
    public function getHitsAction()
    {
        $data_id = intval(Request::getQuery('data_id', 'int'));
        $res = Data::findFirst($data_id);
        if ($res) {
            $data['counts'] = intval(RedisIO::get("hits:" . $data_id));
            $data['counts_base'] = intval(RedisIO::get("hits:" . $data_id) + RedisIO::get("baseHitsCounts:" . $data_id));
            $this->_json($data);
        } else {
            $this->_json([], 4006, 'data_id Not found');
        }
    }

    /**
     * 按评论人员获取评论数据
     */
    public function getCommentByUidAction(){
        $data_id = intval(Request::getQuery('data_id','int'))?:0;
        $uid = intval(Request::getQuery('uid','int'))?:0;
        $limit = intval(Request::getQuery('limit','int'))?:30;
        $page = intval(Request::getQuery('page','int'))?:1;
        if(Users::findFirst($uid)){
            $res = UserComments::getCommentsByUid($uid,$data_id,$limit,$page);
            $this->_json($res);
        } else {
            $this->_json([],404,"Not Found UseriId");
        }
    }
	
	/**
     * 按任意用户id获取评论数据
     */
    public function getCommentByAnyUidAction(){
        $data_id = intval(Request::getQuery('data_id','int'))?:0;
        $uid = intval(Request::getQuery('uid','int'))?:0;
        $limit = intval(Request::getQuery('limit','int'))?:30;
        $page = intval(Request::getQuery('page','int'))?:1;
        $res = UserComments::getCommentsByUid($uid,$data_id,$limit,$page);
        $this->_json($res);
    }

    /**
     * 按评论人气获取数据
     */
    public function getCommentBySortAction(){
        $data_id = intval(Request::getQuery("data_id","int"))?:0;
        $limit = intval(Request::getQuery('limit','int'))?:30;
        $page = intval(Request::getQuery('page','int'))?:1;
        if(Data::findFirst($data_id)){
            $is_accept = RedisIO::get(UserComments::REVIEW . $data_id);  //先审后发开关
            if($is_accept == 3){
                //获取全部评论
                $res = UserComments::getCommentsBySort($data_id,$limit,$page);
            }elseif($is_accept == 2){
                //获取已审评论
                $res = UserComments::getCommentsBySort($data_id,$limit,$page,false);
            }else{
                $this->_json([], 5001, "Can not comment");
            }
            $this->_json($res);
        } else {
            $this->_json([], 404, "Not found data_id");
        }
    }

    /**
     * @param $data
     * @param int $code
     * @param string $msg
     */
    protected function success($data="success", $code = 200, $msg = "ok")
    {
        header('Content-type: application/json');
        echo json_encode([
            'code' => $code,
            'msg' => $msg,
            'data' => $data,
        ]);
        exit;
    }

    /**
     * @param $data
     * @param int $code
     * @param string $msg
     */
    protected function error($data="error", $code = 404, $msg = "error")
    {
        header('Content-type: application/json');
        echo json_encode([
            'code' => $code,
            'msg' => $msg,
            'data' => $data,
        ]);
        exit;
    }








}